
#clearing_rotation_allowed: false

base_global_planner: "global_planner/GlobalPlanner"

base_local_planner: "dwa_local_planner/DWAPlannerROS" 

controller_frequency: 4.0 # was 4 #grrabt 1

planner_patience: 5.0 

controller_patience: 15.0

conservative_reset_dist: 3.0

max_planning_retries: 2

GlobalPlanner:

 use_dijkstra: true
 use_grid_path: false
 use_quadratic: true

TrajectoryPlannerROS: #repeated because it is the namespace of recovery behaviour params
 frequency: 5.0
 acc_lim_x: 0.5 #1.5 #0.8 is not tested


 acc_lim_y: 0.0 

 acc_lim_theta: 0.05 #0.01

 max_vel_x: 0.5 #was 0.4
 min_vel_x: -0.5
 backup_vel: 0.4
#yyy
 max_vel_trans: 0.4

 min_vel_trans: 0.05 

 max_vel_y: 0.0 

 min_vel_y: 0.0 

 max_vel_theta: 0.4 #was 0.3

 min_vel_theta: 0.1 #was 0.01 

 yaw_goal_tolerance: 0.3 #0.05 

 xy_goal_tolerance: 0.1 #0.01 

 sim_time: 1 #1.7 #2.5 #1.7 
 sim_period: 1 #1.7 #2.5 #1.7
 sim_granularity: 0.05 
 #(was tweeked to the resolution of the SLAM map) The step size, in meters, to take between points on a given trajectory

 vx_samples: 10 
 vy_samples: 0 
 vth_samples: 20 



 path_distance_bias: 5.0 #10.0 #32.0 
# (double, default: 32.0 The weighting for how much the controller should stay close to the path it was given
 goal_distance_bias: 24.0  # The weighting for how much the controller should attempt to reach its local goal, also controls speed
 occdist_scale: 0.09 #0.07 #0.05 #0.04 #(double, default 0.01)The weighting for how much the controller should attempt to avoid obstacles
 forward_point_distance: 0.17 #0 # try 0 

 stop_time_buffer: 1 # 0.5 # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds

 # scaling_speed (double, default 0.25)The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
#~<name>/max_scaling_factor (double, default 0.2)The maximum factor to scale the robot's footprint by
 publish_cost_grid: false # for debug (bool, default: false)
#Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.

 oscillation_reset_dist: 0.05 

DWAPlannerROS:
 
 #escape_vel 0.0
 backup_vel: 0.1 #was 0.4
 prune_plan: false
 acc_lim_x: 0.5  #was 0.8 was 1.5 

 acc_lim_y: 0.0 

 acc_lim_th: 0.05 #0.01

 max_vel_x: 0.5 #was 0.4
 min_vel_x: -0.1 #was -0.4
#yyy
 max_vel_trans: 0.4

 min_vel_trans: 0.1 #was 0.05

 max_vel_y: 0.0 

 min_vel_y: 0.0 

 max_vel_theta: 0.4 #was 0.3

 min_vel_theta: 0.1 #was 0.01

 yaw_goal_tolerance: 0.3 #0.05 

 xy_goal_tolerance: 0.1 #0.01 

 sim_time: 1 #1.7 #2.5 #2 #1.7 
 sim_period: 1 #1.7 #2.5 #2 #1.7
 sim_granularity: 0.05 
 #(was tweeked to the resolution of the SLAM map) The step size, in meters, to take between points on a given trajectory

 vx_samples: 10 
 vy_samples: 0 
 vth_samples: 20 



 path_distance_bias: 5.0 #10.0 #32.0 
# (double, default: 32.0 The weighting for how much the controller should stay close to the path it was given
 goal_distance_bias: 24.0  # The weighting for how much the controller should attempt to reach its local goal, also controls speed
 occdist_scale: 0.09 #0.07 #0.05 # 0.04 #(double, default 0.01)The weighting for how much the controller should attempt to avoid obstacles
 forward_point_distance: 0.17 #0 # try 0 

 stop_time_buffer: 1 #0.5 # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds

 # scaling_speed (double, default 0.25)The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
#~<name>/max_scaling_factor (double, default 0.2)The maximum factor to scale the robot's footprint by
 
 publish_cost_grid: false # for debug (bool, default: false)
#Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.

 oscillation_reset_dist: 0.1 #was 0.05
 #(double, default 0.05)How far the robot must travel in meters before oscillation flags are reset


#~<name>/prune_plan (bool, default: true Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
   






